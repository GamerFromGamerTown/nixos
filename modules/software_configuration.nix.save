{ config, pkgs, lib, ... }:

{
  # Program Configuration
  programs = {
    # Enable Firefox
    firefox.enable = true;

    # Enable Hyprland window manager and related programs
    hyprland = {
      enable = true;
      xwayland.enable = true; # Enable XWayland for compatibility with X11 applications
    };
    hyprlock.enable = true; # Enable Hyprlock

    # Enable Steam with external testing
    steam = {
      enable = true;
      extest.enable = true;
    };

    # Zsh Configuration
z432zsh = {
  enable = true;
  histSize = 2500; # Set history size
  shellInit = ''
    # History Settings
    export HISTFILE=~/.zsh_history
    export HISTSIZE=2500
    export SAVEHIST=2500

    # Environment
    export EDITOR=nano

    # Aliases
    alias ls="ls -Ahs --color=auto"
    alias ll="ls -lah"
    alias du="du -h"
    alias sudo="doas"
    alias whomstami="echo thou art $(whoami)"
    alias sudoedit="doas $EDITOR"
    alias ne="/etc/nixos/modules/scripts/ne.sh"
    alias he="nano ~/.config/hypr/hyprland.conf"
    alias rb="sudo nixos-rebuild switch && git -C /etc/nixos add --all && git -C /etc/nixos commit -m 'Update NixOS configuration' && git -C /etc/nixos push origin main"
    alias np="eval \$(ssh-agent -s) && git add . && ssh-add ~/.ssh/github_nixos && git commit -m 'Update configuration' && git push origin main"

    # Prompt Configuration
    autoload -Uz colors && colors
    PROMPT='%{$fg[magenta]%}~%{$reset_color%} %# '

    # Fastfetch (optional)
    fastfetch

    # Syntax Highlighting
    if [ -d ~/.zsh/zsh-syntax-highlighting ]; then
      source ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
    fi

    # Autosuggestions
    if [ -d ~/.zsh/zsh-autosuggestions ]; then
      source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
    fi

    # Completion System
    autoload -Uz compinit
    compinit -C
  '';

  # Automatically install zsh-syntax-highlighting and zsh-autosuggestions
  package = pkgs.zsh;
  additionalPackages = [
    pkgs.zsh-syntax-highlighting
    pkgs.zsh-autosuggestions
  ];
};

# Environment Configuration
environment = {
  defaultPackages = lib.mkForce [ ];
  systemPackages = with pkgs; [
    # System Utilities and Tools
    amdctl
    amdgpu_top
    auto-cpufreq
    bubblewrap
    busybox
    cura
    doas
    fastfetch
    fzf
    graphene-hardened-malloc
    glibcLocales
    grub2
    lact
    logrotate
    lm_sensors
    musl
    oh-my-zsh
    timer
    wget
    zsh

    # System Services and Daemons
    apparmor-profiles
    bluez
    clamav
    libvirt
    networkmanager
    networkmanager-openvpn
    polkit
    polkit_gnome
    qemu
    virt-manager

    # Development Tools
    brave
    git
    home-manager
    python3
    #qbittorrent

    # Multimedia and Graphics
    gimp
    libglvnd
    libreoffice-fresh
    libnotify
    libva
    libvdpau-va-gl
    mesa
    mesa.drivers
    mpv
    openal
    pavucontrol
    pipewire
    webcamoid

    # Wayland and Compositing
    eww
    foot
    swaybg
    vesktop
    waybar
    wayland
    wayland-utils
    waypaper
    wofi
    xwayland

    # Text Editors and IDEs
    vscodium

    # Gaming and Launchers
    prismlauncher
    steam
    the-powder-toy
    tor-browser

    # Monitoring and Information
    btop
    cmatrix
    htop

    # Essential tooling (needed with environment.defaultPackages = lib.mkForce [])
    bashInteractive
    coreutils-full
    curl
    less
    mkpasswd
    nano
    ncurses
    netcat
    su
    time
    util-linux
    which
    xz

    # Fonts
    eb-garamond
    fira-code
    iosevka-bin
    jetbrains-mono
    lato
    nerdfonts
    noto-fonts-emoji
    overpass
    ubuntu_font_family
  ] ++ (with pkgs.kdePackages; [
    # KDE and Polkit Agent
    polkit-kde-agent-1
  ]);
};

# Exclude specific Plasma 6 packages
environment.plasma6.excludePackages = with pkgs.kdePackages; [
  plasma-browser-integration
  oxygen
];

  # Virtualization Configuration
  virtualisation.libvirtd = {
    enable = true;
    extraConfig = ''
      unix_sock_group = "libvirt"
      unix_sock_ro_perms = "0777"
      unix_sock_rw_perms = "0770"
      auth_unix_ro = "none"
      auth_unix_rw = "none"
      log_filters = "3:remote 4:event 3:json 3:jrpc 4:util.json 1:util.libvirt"
      log_outputs = "1:file:/var/log/libvirt/libvirtd.log"
    '';
  };
}
